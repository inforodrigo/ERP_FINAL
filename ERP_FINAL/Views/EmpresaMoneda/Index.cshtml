@model IEnumerable<Entidad.EEmpresaMoneda>

@{
    ViewBag.Title = "Index";
}

<div class="row p-2">
    <div class="col-6 col-md-3">
        <div class="form-group">
            <h3>Moneda Principal</h3>
            <div class="col-lg-10">
                <input type="text" id="monedaprincipal" class="form-control" disabled />
                <input type="hidden" id="idmonedaprincipal" />
            </div>
        </div>
    </div>
    <div class="col-6 col-md-4">
        <div class="form-group">
            <h3>Moneda Alternativa</h3>
            <div class="col-lg-10">
                <select name="monedaal" id="monedaal" class="form-control" style="width: 100%;">
                </select>
            </div>
        </div>
    </div>
    <div class="col-6 col-md-4">
        <div class="form-group">
            <h3>Cambio</h3>
            <div class="col-lg-8">
                <input type="number" id="cambio" class="form-control" name="cambio" style="text-align: right;"/>
            </div>
        </div>
    </div>
    <div class="col-6 col-md-1">
        <div class="form-group mt-4">
            <button class="btn btn-info" onclick="Registrar()" style="margin-right:10px;"> <i class=" fas fa-plus"></i></button>
        </div>
    </div>
</div>

<table class="table table-striped table-bordered table-hover" id="tableempresamoneda">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Fecha)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.MonedaPrincipal)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.MonedaAlternativa)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Cambio)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Activo)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Fecha)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MonedaPrincipal)
            </td>
            <td>
                @if (item.MonedaAlternativa == null)
                {
                    @Html.Label("-");
                }
                else
                {
                    @Html.DisplayFor(modelItem => item.MonedaAlternativa)
                }
            </td>
            <td style="text-align: right;">
                @if (item.Cambio == 0)
                {
                    @Html.Label("-");
                }
                else
                {
                    @Html.DisplayFor(modelItem => item.Cambio)
                }
            </td>
            <td style="text-align: right;">
                @Html.DisplayFor(modelItem => item.Activo)
            </td>
        </tr>
    }

</table>

@section Scripts{

    <script type="text/javascript">
        $(document).ready(function () {
        TableDatatablesRowreorder.init();
        CargarMonedaPrincipal();
        CargarCambioActivo();
    });

    function CargarMonedaPrincipal() {
        $.ajax({
            url: "@Url.Action("ObtenerMonedaPrincipal", "EmpresaMoneda")",
            cache: false,
                    type: "POST",
                    dataType: "json",
            data: {
                datos: 1
            }, success: function (result) {
                $("#idmonedaprincipal").val(result.id);
                $('#monedaprincipal').val(result.nombre);
                CargarMonedasAlternativas();
            }
        });
    }

    function CargarMonedasAlternativas() {
        $("#monedaal").empty();
        $.ajax({
            url: "@Url.Action("ObtenerMonedasAlternativa", "EmpresaMoneda")",
            cache: false,
                    type: "POST",
                    dataType: "json",
            data: {
                moneda: $("#idmonedaprincipal").val()
            }, success: function (result) {
                if (result.tipo == 1) {
                    $.each(result.monedas, function (index, value) {
                        $('#monedaal').append('<option value=' + value.Id + ' > ' + value.Nombre + '</option>');
                    })
                    document.getElementById("monedaal").setAttribute("disabled", "disabled");
                } else {
                    $.each(result.monedas, function (index, value) {
                        $('#monedaal').append('<option value=' + value.Id + ' > ' + value.Nombre + '</option>');
                    })    
                }
                console.log(result.tipo);
            }

        });
    }

    function CargarCambioActivo() {       
        $.ajax({
            url: "@Url.Action("ObtenerCambioActivo", "EmpresaMoneda")",
            cache: false,
                    type: "POST",
                    dataType: "json",
            data: {
                moneda: 0
            }, success: function (result) {
                $('#cambio').val(result.cambio);               
            }

        });
    }

    function Validar() {
        if ($("#cambio").val() == '') {
            return MostrarMensaje('Error el cambio es obligatorio');
            return false;
        }
        if ($("#cambio").val() <= 0) {
            return MostrarMensaje('Error el cambio debe ser mayor a 0');
            return false;
        }
        return true;
    }

    function Registrar() {
        var validate = Validar();
        if (!validate) {
            return;
        }

        $.ajax({
            url: "@Url.Action("Create", "EmpresaMoneda")",
            cache: false,
            data: { monedaprincipal: $("#idmonedaprincipal").val(), monedaalternativa: $("#monedaal").val(), cambio: $("#cambio").val() },
            type: "POST",
            dataType: "script"
        });
    }

    function MostrarMensaje(msj) {
        $(document).Toasts('create', {
            class: ' bg-danger',
            title: "Alerta",
            autohide: true,
            delay: 10000,
            body: msj
        });
    }

    function MostrarMensajeExito(msj) {
        var msjbody = "Se Registro los Datos Exitosamente";
        $(document).Toasts('create', {
            class: 'bg-success',
            title: msj,
            autohide: true,
            delay: 10000,
            body: msjbody
        });
    }

    function redireccionar(url) {
        window.location = url;
    }

    var TableDatatablesRowreorder = function () {
        var initTable1 = function () {
            var table = $('#tableempresamoneda');

            var oTable = table.dataTable({

                // Internationalisation. For more info refer to http://datatables.net/manual/i18n
                "language": {
                    "aria": {
                        "sortAscending": ": activate to sort column ascending",
                        "sortDescending": ": activate to sort column descending"
                    },
                    "emptyTable": "No hay datos para mostrar",
                    "info": "Mostrando _START_ a _END_ de _TOTAL_ Gestión",
                    "infoEmpty": "No hay datos para mostrar",
                    "infoFiltered": "(Filtrado de _MAX_ total Gestión)",
                    "lengthMenu": "_MENU_ Gestión",
                    "search": "Buscar:",
                    "zeroRecords": "No se encontraron coincidencias"
                },

                // Or you can use remote translation file
                //"language": {
                //   url: '//cdn.datatables.net/plug-ins/3cfcc339e89/i18n/Portuguese.json'
                //},

                // setup buttons extentension: http://datatables.net/extensions/buttons/
                buttons: [
                    //{ extend: 'print', className: 'btn dark btn-outline', exportOptions: { columns: [0, 1, 2, 3] } },
                    { extend: 'copy', className: 'btn purple btn-outline ', exportOptions: { columns: [0, 1] } },
                    { extend: 'pdf', className: 'btn red btn-outline', exportOptions: { columns: [0, 1] } },
                    { extend: 'csv', className: 'btn blue btn-outline ', exportOptions: { columns: [0, 1] } },
                    { extend: 'excel', className: 'btn green btn-outline ', exportOptions: { columns: [0, 1] } }
                ],
                columnDefs: [
                    { orderable: false, targets: [] }
                ],
                // setup rowreorder extension: http://datatables.net/extensions/rowreorder/

                "order": [
                    [0, 'asc']
                ],

                "lengthMenu": [
                    [5, 10, 15, 20, -1],
                    [5, 10, 15, 20, "Todos"] // change per page values here
                ],
                // set the initial value
                "pageLength": 10,

                "dom": "<'row' <'col-md-12'B>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable

                // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
                // So when dropdowns used the scrollable div should be removed.
                //"dom": "<'row' <'col-md-12'T>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",
            });
        }

        return {

            //main function to initiate the module
            init: function () {

                if (!$().dataTable) {
                    return;
                }

                initTable1();
            }

        };

    }();

    </script>
}
